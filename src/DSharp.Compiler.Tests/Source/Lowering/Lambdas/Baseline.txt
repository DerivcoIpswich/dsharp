"use strict";

define('test', ['ss'], function(ss) {
  var $global = this;
  // LoweringTests.ILogger

  function ILogger() { }


  // LoweringTests.Test

  function Test() {
    this.bar = 0;
    this._getFalse = function() {
      return false;
    };
    var addOne = function(a) {
      return a + 1;
    };
    var sum = function(a, b) {
      return a + b;
    };
    var doNothing = function() {
    };
    var doSomething = function(a) {
      if (!a) {
        return;
      }
    };
    var foo = ss.createGenericType(GenericClass_$1, {T : Test});
    var nested = function(x) {
      x.method(function(a) {
        return a.bar++;
      });
    };
    var ignored = function(_) {
      return false;
    };
    X.y(function(z) {
      return false;
    });
    foo.method(function(a) {
      return a.bar++;
    });
  }
  var Test$ = {

  };


  // LoweringTests.GenericClass`1

  function GenericClass_$1() {
  }
  var GenericClass_$1$ = {
    method: function(action) {
    }
  };


  // LoweringTests.LoggerExtensions

  function LoggerExtensions() {
  }
  LoggerExtensions.info = function($TArgs, logger, message) {
    LoggerExtensions._executeLogger({T: $TArgs['T']}, logger, function(inner) {
      return ss.bind('info', inner);
    }, message);
  };
  LoggerExtensions.formatInfo = ss.paramsGenerator(3, function($TArgs, logger, messageFormat, parameters) {
    LoggerExtensions._executeLogger({T: $TArgs['T']}, logger, function(inner) {
      return ss.bind('info', inner);
    }, messageFormat, parameters);
  });
  LoggerExtensions._executeLogger = ss.paramsGenerator(4, function($TArgs, logger, method, message, parameters) {
    var loggerMethod = method(logger);
    var type = $TArgs['T'];
    var channelName = ss.typeName(type);
    loggerMethod(message, channelName, ss.value(parameters, new Array(0)));
  });


  // LoweringTests.X

  function X() {
  }
  X.y = function(z) {
  };
  var X$ = {

  };


  // MissingUsing.Z

  function Z() {
  }
  var Z$ = {

  };


  var $module = ss.module('test', null,
    {
      ILogger: ss.defineInterface(ILogger),
      Test: ss.defineClass(Test, Test$, [], null),
      GenericClass_$1: ss.defineClass(GenericClass_$1, GenericClass_$1$, [], null),
      LoggerExtensions: ss.defineClass(LoggerExtensions, null, [], null),
      X: ss.defineClass(X, X$, [], null),
      Z: ss.defineClass(Z, Z$, [], null)
    });
  var $exports = $module.api;


  return $exports;
});
