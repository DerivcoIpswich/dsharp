"use strict";

define('test', ['ss'], function(ss) {
  var $global = this;
  // ExpressionTests.TestBase

  function TestBase() {
  }
  var TestBase$ = {
    performAction: function() {
    }
  };


  // ExpressionTests.Program

  function Program() {
  }
  var Program$ = {
    main: function() {
      this.noParameters({T: Number});
      this.noParameters({T: TestBase});
      this.noParametersConstrained({T: TestDisposableBase});
      this.noParametersConstrained({T: ss.IDisposable});
      this.inParameter(1234);
      this.inParameter(1234);
      this.inParameter(1234);
      this.inParameterConstrained({T: TestDisposableBase}, new TestDisposableBase());
      this.inParameterConstrained({T: ss.IDisposable}, new TestDisposableBase());
      this.complexInGenerics(new TestDisposableBase(), new TestDisposableBase());
      this.nullableGenerics({T: Number});
    },
    noParameters: function($TArgs) {
    },
    noParametersConstrained: function($TArgs) {
    },
    inParameter: function(inGenericParameter) {
      return inGenericParameter;
    },
    inParameterConstrained: function($TArgs, x) {
      var xType = ss.typeOf(x);
      x.dispose();
    },
    complexInGenerics: function(a1, a2) {
      a1.dispose();
      a2.performAction();
      a2.dispose();
    },
    nullableGenerics: function($TArgs) {
    }
  };


  // ExpressionTests.TestDisposableBase

  function TestDisposableBase() {
    $module.registry.TestDisposableBase.$base.call(this);
  }
  var TestDisposableBase$ = {
    dispose: function() {
    }
  };


  var $module = ss.module('test', null,
    {
      TestBase: ss.defineClass(TestBase, TestBase$, [], null),
      Program: ss.defineClass(Program, Program$, [], null),
      TestDisposableBase: ss.defineClass(TestDisposableBase, TestDisposableBase$, [], TestBase, [ss.IDisposable])
    });
  var $exports = $module.api;


  return $exports;
});
