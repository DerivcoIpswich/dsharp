"use strict";

define('test', ['ss'], function(ss) {
  var $global = this;
  // ExpressionTests.IExecutor

  function IExecutor() { }


  // ExpressionTests.Program

  function Program() {
  }
  Program.main = function(args) {
    var concreteClass = new ConcreteClass();
    concreteClass.execute();
  };
  var Program$ = {

  };


  // ExpressionTests.BaseClass

  function BaseClass() {
  }
  var BaseClass$ = {
    onResourceLoaded: function() {
    }
  };


  // ExpressionTests.Executor

  function Executor() {
  }
  var Executor$ = {
    execute: function(success, failure) {
      success();
      failure();
    }
  };


  // ExpressionTests.Foo

  function Foo(i, j) {
  }
  var Foo$ = {
    toString: function() {
      return 'Foo';
    },
    sum: function(i) {
      return 0;
    }
  };


  // ExpressionTests.ConcreteClass

  function ConcreteClass(executor) {
    this._executor$1 = null;
    BaseClass.call(this);
    this._executor$1 = executor;
  }
  var ConcreteClass$ = {
    execute: function() {
      this._executor$1.execute(ss.baseBind('onResourceLoaded', this), ss.bind('onResourceFailed', this));
    },
    onResourceFailed: function() {
    },
    onResourceLoaded: function() {
    }
  };


  // ExpressionTests.Bar

  function Bar(i, j, f) {
    Foo.call(this, i, j);
  }
  var Bar$ = {
    sum: function() {
      return Foo.prototype.sum.call(this, 1) + 1;
    },
    toString: function() {
      return Foo.prototype.toString.call(this) + ' -> Bar';
    }
  };


  var $module = ss.module('test', null,
    {
      IExecutor: ss.defineInterface(IExecutor),
      Program: ss.defineClass(Program, Program$, [], null),
      BaseClass: ss.defineClass(BaseClass, BaseClass$, [], null),
      Executor: ss.defineClass(Executor, Executor$, [], null, [IExecutor]),
      Foo: ss.defineClass(Foo, Foo$, [Number, Number], null),
      ConcreteClass: ss.defineClass(ConcreteClass, ConcreteClass$, function (registry) { return [registry.IExecutor]}, function (registry) { return registry.BaseClass}),
      Bar: ss.defineClass(Bar, Bar$, function (registry) { return [Number, Number, registry.Foo]}, function (registry) { return registry.Foo})
    });
  var $exports = $module.api;


  return $exports;
});
