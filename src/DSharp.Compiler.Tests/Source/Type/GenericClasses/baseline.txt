"use strict";

define('test', ['ss'], function(ss) {
  var $global = this;
  // DSharp.Compiler.Tests.Source.Type.GenericClasses.IBulkAsyncExecutionManager`1

  function IBulkAsyncExecutionManager_$1() { }


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.Program

  function Program() {
  }
  Program.main = function(args) {
    var genericClass = ss.createGenericType(GenericClass_$1, {T : Number}, 1);
    var genericClass2 = ss.createGenericType(GenericClass_$1, {T : MyType}, new MyType());
    var isSame = genericClass2.Type === genericClass.Type;
    var genericClassType = ss.getGenericConstructor(GenericClass_$1, {T: Number});
    var array = [ 1, 2, 3, 4, 5 ];
    var newArr = Program.copy(array, 0, array.length);
    var values = {};
    var values2 = {};
    var copiedValues = Program.copyDictionary(values);
    var copiedValues2 = Program.copyDictionary(values2);
    var copiedValuesOfStrings = Program.copyDictionary(Program.copyDictionaryOfStringKeys(values));
    var bem = ss.createGenericType(BulkAsyncExecutionManager_$1, {T : String}, );
    bem.addExecutionKey('');
    bem.addExecutionKeys([ 'Lol', 'asdasd', 'hashasd' ]);
    bem.startExecution();
    if (ss.typeOf(bem) === ss.getGenericConstructor(BulkAsyncExecutionManager_$1, {T: Number})) {
    }
    if (ss.typeOf(bem) === ss.getGenericConstructor(BulkAsyncExecutionManager_$1, {T: String})) {
    }
    if (ss.canAssign(ss.getGenericConstructor(IBulkAsyncExecutionManager_$1, {T: String}), ss.typeOf(bem))) {
    }
  };
  Program.copy = function(source, startIndex, count) {
    var destination = new Array(source.length);
    ss.copyArray(source, startIndex, destination, 0, count);
    return destination;
  };
  Program.copyDictionary = function(source) {
    var newDictionary = {};
    for (var $key1 in source) {
      var item = { key: $key1, value: source[$key1] };
      ss.addKeyValue(newDictionary, item.key, item.value);
    }
    return newDictionary;
  };
  Program.copyDictionaryOfStringKeys = function(source) {
    var newDictionary = {};
    for (var $key1 in source) {
      var item = { key: $key1, value: source[$key1] };
      ss.addKeyValue(newDictionary, item.key, item.value);
    }
    return newDictionary;
  };
  var Program$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.MyType

  function MyType() {
  }
  var MyType$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.BaseGenericClass`1

  function BaseGenericClass_$1(baseField) {
    this.baseField = baseField;
  }
  var BaseGenericClass_$1$ = {
    $get_BaseField: function() {
      return this.baseField;
    }
  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.BulkAsyncExecutionManager`1

  function BulkAsyncExecutionManager_$1() {
  }
  var BulkAsyncExecutionManager_$1$ = {
    addExecutionKey: function(executionKey) {
      var typeOfT = ss.getTypeArgument(this, 'T');
    },
    addExecutionKeys: function(executionKeys) {
      var typeOfT = ss.typeOf(executionKeys);
    },
    startExecution: function() {
    }
  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.GenericClass`1

  function GenericClass_$1(value, mutator) {
    BaseGenericClass_$1.call(this, value);
    this._value$1 = value;
    this._mutator$1 = mutator;
  }
  var GenericClass_$1$ = {
    $get_Value: function() {
      return this._value$1;
    },
    $get_Type: function() {
      return ss.getTypeArgument(this, 'T');
    },
    mutate: function() {
      this._value$1 = this._mutator$1(this._value$1);
    }
  };


  var $exports = ss.module('test', null,
    {
      IBulkAsyncExecutionManager_$1: ss.defineInterface(IBulkAsyncExecutionManager_$1),
      Program: ss.defineClass(Program, Program$, [], null),
      MyType: ss.defineClass(MyType, MyType$, [], null),
      BaseGenericClass_$1: ss.defineClass(BaseGenericClass_$1, BaseGenericClass_$1$, [Object], null),
      BulkAsyncExecutionManager_$1: ss.defineClass(BulkAsyncExecutionManager_$1, BulkAsyncExecutionManager_$1$, [], null, [IBulkAsyncExecutionManager_$1]),
      GenericClass_$1: ss.defineClass(GenericClass_$1, GenericClass_$1$, [Object, Function], BaseGenericClass_$1)
    });


  return $exports;
});