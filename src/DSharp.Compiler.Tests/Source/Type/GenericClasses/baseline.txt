"use strict";

define('test', ['ss', 'lib1'], function(ss, lib1) {
  var $global = this;
  // DSharp.Compiler.Tests.Source.Type.GenericClasses.IBulkAsyncExecutionManager`1

  function IBulkAsyncExecutionManager_$1() { }


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.Program

  function Program() {
  }
  Program.main = function(args) {
    var genericClass = ss.createGenericType(GenericClass_$1, {T : Number}, 1);
    var genericClass2 = ss.createGenericType(GenericClass_$1, {T : MyType}, new MyType());
    var genericClass3 = new GenericTypeWithIgnore();
    var importedGenericClass = new lib1.ScriptImportedGenericClass();
    var referencedGenericClass = ss.createGenericType(lib1.ReferencedGenericClass_$1, {T : MyType});
    var isSame = genericClass2.Type === genericClass.Type;
    var genericClassType = ss.getGenericConstructor(GenericClass_$1, {T: Number});
    var array = [ 1, 2, 3, 4, 5 ];
    var newArr = Program.copy({T: Number}, array, 0, array.length);
    var values = {};
    var values2 = {};
    var copiedValues = Program.copyDictionary({TKey: String, TValue: Object}, values);
    var copiedValues2 = Program.copyDictionary({TKey: String, TValue: Object}, values2);
    var copiedValuesOfStrings = Program.copyDictionary({TKey: String, TValue: Object}, Program.copyDictionaryOfStringKeys({TValue: Object}, values));
    var bem = ss.createGenericType(BulkAsyncExecutionManager_$1, {T : String});
    bem.addExecutionKey('');
    bem.addExecutionKeys([ 'Lol', 'asdasd', 'hashasd' ]);
    bem.startExecution();
    if (ss.typeOf(bem) === ss.getGenericConstructor(BulkAsyncExecutionManager_$1, {T: Number})) {
    }
    if (ss.typeOf(bem) === ss.getGenericConstructor(BulkAsyncExecutionManager_$1, {T: String})) {
    }
    if (ss.canAssign(ss.getGenericConstructor(IBulkAsyncExecutionManager_$1, {T: String}), ss.typeOf(bem))) {
    }
    var genericWithMultipleParams = ss.createGenericType(GenericWithMultipleParams_$3, {T1 : Number, T2 : Boolean, T3 : String});
    var str = genericWithMultipleParams.toString();
    var specificClassOfGeneric = new SpecificClassOfGeneric();
    var isInt = specificClassOfGeneric.Type === Number;
    var myContainer = specificClassOfGeneric.createContainer();
    isInt = myContainer.Type === Number;
    var isType1 = ss.makeGenericType(ss.getGenericTemplate(GenericClass_$1, [ 'T' ]), String) === ss.getGenericConstructor(GenericClass_$1, {T: String});
    var isType2 = ss.makeGenericType(ss.getGenericTemplate(Generic_2_$2, [ 'T1', 'T2' ]), String, Number) === ss.getGenericConstructor(Generic_2_$2, {T1: String, T2: Number});
  };
  Program.copy = function($TArgs, source, startIndex, count) {
    var type = $TArgs['T'];
    var destination = new Array(source.length);
    ss.copyArray(source, startIndex, destination, 0, count);
    return destination;
  };
  Program.copyDictionary = function($TArgs, source) {
    var newDictionary = {};
    for (var $key1 in source) {
      var item = { key: $key1, value: source[$key1] };
      ss.addKeyValue(newDictionary, item.key, item.value);
    }
    return newDictionary;
  };
  Program.copyDictionaryOfStringKeys = function($TArgs, source) {
    var newDictionary = {};
    for (var $key1 in source) {
      var item = { key: $key1, value: source[$key1] };
      ss.addKeyValue(newDictionary, item.key, item.value);
    }
    return newDictionary;
  };
  var Program$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.MyType

  function MyType() {
  }
  var MyType$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.BaseGenericClass`1

  function BaseGenericClass_$1(baseField) {
    this.baseField = baseField;
  }
  var BaseGenericClass_$1$ = {
    $get_BaseField: function() {
      return this.baseField;
    }
  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.BulkAsyncExecutionManager`1

  function BulkAsyncExecutionManager_$1() {
  }
  var BulkAsyncExecutionManager_$1$ = {
    addExecutionKey: function(executionKey) {
      var typeOfT = ss.getTypeArgument(this, 'T', BulkAsyncExecutionManager_$1);
    },
    addExecutionKeys: function(executionKeys) {
      var typeOfT = ss.typeOf(executionKeys);
    },
    startExecution: function() {
    }
  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.GenericWithMultipleParams`3

  function GenericWithMultipleParams_$3() {
  }
  var GenericWithMultipleParams_$3$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.GenericTypeWithIgnore`2

  function GenericTypeWithIgnore() {
  }
  var GenericTypeWithIgnore$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.GenericTypeWithUseGenericName`3

  function GenericTypeWithUseGenericName_$3() {
  }
  var GenericTypeWithUseGenericName_$3$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.GenericTypeWithParamsInCtor`1

  var GenericTypeWithParamsInCtor_$1 = ss.namedFunction('GenericTypeWithParamsInCtor_$1',ss.paramsGenerator(1, function(arg, args) {
    var x = ss.typeName(ss.getTypeArgument(this, 'T', GenericTypeWithParamsInCtor_$1));
  }
  ));
  var GenericTypeWithParamsInCtor_$1$ = {
    genericMethodWithParams: ss.paramsGenerator(2, function($TArgs, arg, args) {
    })
  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.Generic_2`2

  function Generic_2_$2() {
  }
  var Generic_2_$2$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.GenericWithGenericInConstructor`1

  function GenericWithGenericInConstructor_$1(genericClass) {
    this._genericClass = genericClass;
  }
  var GenericWithGenericInConstructor_$1$ = {

  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.GenericClass`1

  function GenericClass_$1(value, mutator) {
    ss.getGenericConstructor(BaseGenericClass_$1,{T : ss.getTypeArgument(this, 'T', GenericClass_$1)}).call(this, value);
    this._value$1 = value;
    this._mutator$1 = mutator;
  }
  var GenericClass_$1$ = {
    $get_Value: function() {
      return this._value$1;
    },
    $get_Type: function() {
      return ss.getTypeArgument(this, 'T', GenericClass_$1);
    },
    mutate: function() {
      this._value$1 = this._mutator$1(this._value$1);
    },
    createContainer: function() {
      return ss.createGenericType(GenericClass_$1, {T : ss.getTypeArgument(this, 'T', GenericClass_$1)}, this._value$1, this._mutator$1);
    }
  };


  // DSharp.Compiler.Tests.Source.Type.GenericClasses.SpecificClassOfGeneric

  function SpecificClassOfGeneric(value) {
    ss.getGenericConstructor(GenericClass_$1,{T : Number}).call(this, value, SpecificClassOfGeneric._myMutator$2);
  }
  SpecificClassOfGeneric._myMutator$2 = function(valIn) {
    return valIn + 1;
  };
  var SpecificClassOfGeneric$ = {
    returnMyField: function() {
      return this.BaseField;
    }
  };


  var $module = ss.module('test', null,
    {
      IBulkAsyncExecutionManager_$1: ss.defineInterface(IBulkAsyncExecutionManager_$1),
      Program: ss.defineClass(Program, Program$, [], null),
      MyType: ss.defineClass(MyType, MyType$, [], null),
      BaseGenericClass_$1: ss.defineClass(BaseGenericClass_$1, BaseGenericClass_$1$, ['T'], null),
      BulkAsyncExecutionManager_$1: ss.defineClass(BulkAsyncExecutionManager_$1, BulkAsyncExecutionManager_$1$, [], null, function (registry) { return [ss.makeMappedGenericTemplate(registry.IBulkAsyncExecutionManager_$1, {T : 'T'})]}),
      GenericWithMultipleParams_$3: ss.defineClass(GenericWithMultipleParams_$3, GenericWithMultipleParams_$3$, [], null),
      GenericTypeWithIgnore: ss.defineClass(GenericTypeWithIgnore, GenericTypeWithIgnore$, [], null),
      GenericTypeWithUseGenericName_$3: ss.defineClass(GenericTypeWithUseGenericName_$3, GenericTypeWithUseGenericName_$3$, [], null),
      GenericTypeWithParamsInCtor_$1: ss.defineClass(GenericTypeWithParamsInCtor_$1, GenericTypeWithParamsInCtor_$1$, ['T', Array], null),
      Generic_2_$2: ss.defineClass(Generic_2_$2, Generic_2_$2$, [], null),
      GenericWithGenericInConstructor_$1: ss.defineClass(GenericWithGenericInConstructor_$1, GenericWithGenericInConstructor_$1$, function (registry) { return [ss.makeMappedGenericTemplate(registry.GenericClass_$1, {T : 'X'})]}, null),
      GenericClass_$1: ss.defineClass(GenericClass_$1, GenericClass_$1$, ['T', Function], function (registry) { return ss.makeMappedGenericTemplate(registry.BaseGenericClass_$1, {T : 'T'})}),
      SpecificClassOfGeneric: ss.defineClass(SpecificClassOfGeneric, SpecificClassOfGeneric$, [Number], function (registry) { return ss.getGenericConstructor(registry.GenericClass_$1, {T : Number})})
    });
  var $exports = $module.api;


  return $exports;
});
