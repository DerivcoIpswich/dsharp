"use strict";

define('test', ['ss'], function(ss) {
  var $global = this;
  // TypeTests.ExtendedInterface

  function ExtendedInterface() { }


  // TypeTests.BaseClass

  function BaseClass() {
  }
  var BaseClass$ = {
    dispose: function() {
    }
  };


  // TypeTests.MyClass

  function MyClass() {
    ss.defineProperty(this, 'Other', null);
    ss.defineProperty(this, 'Getter', 0);
    ss.defineProperty(this, 'Tyyype', null);
    BaseClass.call(this);
    var members = ss.getMembers((MyClass));
    MyClass._assert$1(members[0].Name === 'get_Item');
    MyClass._assert$1(members[1].Name === 'set_Item');
    MyClass._assert$1(members[2].Name === 'Getter');
    MyClass._assert$1((members[2]).Type === Number);
    MyClass._assert$1(members[3].Name === 'Method');
    MyClass._assert$1((members[3]).Type == null);
  }
  MyClass._assert$1 = function(assertion) {
  };
  var MyClass$ = {
    getDelegate: function() {
      throw new Error();
    },
    method: function() {
    },
    method2: function($TArgs) {
      throw new Error();
    },
    method3: function() {
      throw new Error();
    },
    method4: function() {
      throw new Error();
    },
    get_item: function(index) {
      return index;
    },
    set_item: function(index, value) {
      return value;
    }
  };


  // TypeTests.MyClass`1

  function MyClass_$1() {
    ss.defineProperty(this, 'Other', null);
    BaseClass.call(this);
  }
  var MyClass_$1$ = {

  };


  var $exports = ss.module('test', null,
    {
      ExtendedInterface: ss.defineInterface(ExtendedInterface, [ss.IDisposable, ss.ICollection_$1]),
      BaseClass: ss.defineClass(BaseClass, BaseClass$, [], null, [ss.IDisposable]),
      MyClass: ss.defineClass(MyClass, MyClass$, [], BaseClass),
      MyClass_$1: ss.defineClass(MyClass_$1, MyClass_$1$, [], BaseClass)
    });


  return $exports;
});