"use strict";

define('test', ['ds'], function(ds) {
  var $global = this;

  // TypeTests.IMyInterface

  function IMyInterface() { }


  // TypeTests.EmptyClass

  function EmptyClass() {
  }
  var EmptyClass$ = {

  };


  // TypeTests.SingleMemberClass

  function SingleMemberClass() {
  }
  var SingleMemberClass$ = {
    run: function() {
    }
  };


  // TypeTests.MergedMembersClass

  function MergedMembersClass() {
    this.foo = false;
  }
  var MergedMembersClass$ = {
    testMethod: function() {
      return null;
    }
  };


  // TypeTests.MyClass

  function MyClass() {
  }
  var MyClass$ = {
    start: function() {
    },
    Stop: function() {
    },
    resume: function() {
    }
  };


  // TypeTests.SomeClass

  function SomeClass() {
  }
  var SomeClass$ = {
    close: function() {
    },
    _cancel: function() {
    },
    run: function() {
    }
  };


  // TypeTests.App

  function App() {
    var s;
    s.run();
    var d;
    d.bar = d.name;
    d.value = d.foo;
    var mc;
    mc.start();
    mc.Stop();
    mc.resume();
  }
  var App$ = {

  };


  // TypeTests.DerivedMemberClass

  function DerivedMemberClass() {
    SingleMemberClads.call(this);
  }
  var DerivedMemberClass$ = {

  };


  // TypeTests.DerivedMergedMembersClass

  function DerivedMergedMembersClass() {
    MergedMembersClads.call(this);
    this.name = this.bar + this.bar + 'Name';
  }
  var DerivedMergedMembersClass$ = {
    testMethod: function() {
      return null;
    },
    testMethod2: function() {
      return this.get_item('foo');
    },
    someMethod: function() {
      var e1 = document.getElementById(this.bar);
      var e2 = document.getElementById(this.name);
      var e3 = document.getElementById(this.bar);
      var s = this.testMethod() + MergedMembersClads.prototype.testMethod.call(this);
    },
    get_item: function(s) {
      return s;
    }
  };


  var $exports = ds.module('test',
    {
      SingleMemberClass: ds.defineClass(SingleMemberClass, SingleMemberClass$, [], null),
      SomeClass: ds.defineClass(SomeClass, SomeClass$, [], null)
    },
    {
      IMyInterface: ds.defineInterface(IMyInterface),
      EmptyClass: ds.defineClass(EmptyClass, EmptyClass$, [], null),
      MergedMembersClass: ds.defineClass(MergedMembersClass, MergedMembersClass$, [], null),
      MyClass: ds.defineClass(MyClass, MyClass$, [], null, [IMyInterface]),
      App: ds.defineClass(App, App$, [], null),
      DerivedMemberClass: ds.defineClass(DerivedMemberClass, DerivedMemberClass$, [], SingleMemberClass),
      DerivedMergedMembersClass: ds.defineClass(DerivedMergedMembersClass, DerivedMergedMembersClass$, [], MergedMembersClass)
    });


  return $exports;
});
