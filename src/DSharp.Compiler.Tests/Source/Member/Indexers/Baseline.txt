"use strict";

define('test', ['DSharp'], function(DSharp) {
  var $global = this;

  // MemberTests.IIndexable

  function IIndexable() { }


  // MemberTests.Normal

  function Normal() {
    this._n = 0;
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var Normal$ = {
    get_item: function(name) {
      return this._n;
    },
    set_item: function(name, value) {
      this._n = value;
      return value;
    }
  };


  // MemberTests.GetterOnly

  function GetterOnly() {
    this._n = 0;
    var i = this.get_item('name');
  }
  var GetterOnly$ = {
    get_item: function(name) {
      return this._n;
    }
  };


  // MemberTests.VirtualIndexer

  function VirtualIndexer() {
    this._n = 0;
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var VirtualIndexer$ = {
    get_item: function(name) {
      return this._n;
    },
    set_item: function(name, value) {
      this._n = value;
      return value;
    }
  };


  // MemberTests.AbstractIndexer

  function AbstractIndexer() {
    this._n = 0;
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var AbstractIndexer$ = {

  };


  // MemberTests.MultipleArgs

  function MultipleArgs() {
    this._n = 0;
    var i = this.get_item('name', 'name2', 'name3');
    this.set_item('name', 'name2', 'name3', i + 1);
  }
  var MultipleArgs$ = {
    get_item: function(first, middle, last) {
      var value = first + middle + last;
      return value.length;
    },
    set_item: function(first, middle, last, value) {
      this._n = value;
      return value;
    }
  };


  // MemberTests.ImplementedIndexer2

  function ImplementedIndexer2() {
  }
  var ImplementedIndexer2$ = {
    get_item: function(index) {
      return 0;
    }
  };


  // MemberTests.Test

  function Test() {
    var ma = new MultipleArgs();
    ma.set_item('1', '2', '3', ma.get_item('3', '2', '1'));
    var ii = new ImplementedIndexer();
    ii.set_item('big', ii.get_item('small'));
    var ai = ii;
    ai.set_item('small', ai.get_item('big'));
    var indexable = new ImplementedIndexer2();
    var o = indexable.get_item(0);
  }
  var Test$ = {

  };


  // MemberTests.A

  function A() {
  }
  var A$ = {
    get_item: function(name) {
      return name;
    }
  };


  // MemberTests.OverriddenIndexer

  function OverriddenIndexer() {
    VirtualIndexer.call(this);
    var i = this.get_item('name');
    this.set_item('name', i + 1);
    var j = VirtualIndexer.prototype.get_item.call(this, 'name');
    VirtualIndexer.prototype.set_item.call(this, 'name', 43);
  }
  var OverriddenIndexer$ = {
    get_item: function(name) {
      return VirtualIndexer.prototype.get_item.call(this, name) + 1;
    },
    set_item: function(name, value) {
      VirtualIndexer.prototype.set_item.call(this, name, value - 1);
      return value;
    }
  };


  // MemberTests.ImplementedIndexer

  function ImplementedIndexer() {
    this._n$1 = 0;
    AbstractIndexer.call(this);
    var i = this.get_item('name');
    this.set_item('name', i + 1);
  }
  var ImplementedIndexer$ = {

  };


  // MemberTests.B

  function B() {
    A.call(this);
  }
  var B$ = {

  };


  // MemberTests.C

  function C() {
    B.call(this);
  }
  C.main = function() {
    var c = new C();
    c.set_item('a', c.get_item('b'));
    var a = c;
    a.set_item('b', a.get_item('c'));
  };
  var C$ = {
    get_item: function(name) {
      return name;
    }
  };


  var $exports = DSharp.module('test', null,
    {
      IIndexable: DSharp.defineInterface(IIndexable),
      Normal: DSharp.defineClass(Normal, Normal$, [], null),
      GetterOnly: DSharp.defineClass(GetterOnly, GetterOnly$, [], null),
      VirtualIndexer: DSharp.defineClass(VirtualIndexer, VirtualIndexer$, [], null),
      AbstractIndexer: DSharp.defineClass(AbstractIndexer, AbstractIndexer$, [], null),
      MultipleArgs: DSharp.defineClass(MultipleArgs, MultipleArgs$, [], null),
      ImplementedIndexer2: DSharp.defineClass(ImplementedIndexer2, ImplementedIndexer2$, [], null, [IIndexable]),
      Test: DSharp.defineClass(Test, Test$, [], null),
      A: DSharp.defineClass(A, A$, [], null),
      OverriddenIndexer: DSharp.defineClass(OverriddenIndexer, OverriddenIndexer$, [], VirtualIndexer),
      ImplementedIndexer: DSharp.defineClass(ImplementedIndexer, ImplementedIndexer$, [], AbstractIndexer),
      B: DSharp.defineClass(B, B$, [], A),
      C: DSharp.defineClass(C, C$, [], B)
    });


  return $exports;
});
