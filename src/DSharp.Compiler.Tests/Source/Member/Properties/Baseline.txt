"use strict";

define('test', ['ds'], function(ds) {
  var $global = this;

  // MemberTests.ITest

  function ITest() { }


  // MemberTests.Test

  function Test() {
    this.isFoo = false;
    this.XYZ = 1;
    this.XYZ = this.Name.length;
    var inter = this;
    inter.XYZ = this.Name.length;
    inter.XYZ++;
    --this.XYZ;
    var v = Test.StaticProp;
    v = Test.StaticProp;
    var foo = this.IsFoo;
    this.IsFoo = true;
    this.ISet = 'set me';
  }
  ds.createPropertyGet(Test, 'StaticProp', function() {
    return 2006;
  });
  var Test$ = {
    $get_XYZ: function() {
      return 0;
    },
    $set_XYZ: function(value) {
      return value;
    },
    $get_IsFoo: function() {
      return this.isFoo;
    },
    $set_IsFoo: function(value) {
      this.isFoo = value;
      return value;
    },
    $set_ISet: function(value) {
      return value;
    },
    $get_Name: function() {
      return 'nk';
    },
    $get_IsInitialized: function() {
      return false;
    }
  };


  // MemberTests.Test2

  function Test2() {
    Test.call(this);
    var n = ds.baseProperty(Test2, 'XYZ').get.call(this);
    ds.baseProperty(Test2, 'XYZ').set.call(this, 6);
    if (n === this.XYZ) {
    }
    if (this.XYZ === n) {
    }
    n = Test.StaticProp;
  }
  var Test2$ = {

  };


  var $exports = ds.module('test', null,
    {
      ITest: ds.defineInterface(ITest),
      Test: ds.defineClass(Test, Test$, [], null),
      Test2: ds.defineClass(Test2, Test2$, [], Test)
    });


  return $exports;
});
